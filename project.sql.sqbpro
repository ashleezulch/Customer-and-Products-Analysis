<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/point/Downloads/stores.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="4975"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,8:mainproducts"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="158"/><column index="2" value="262"/><column index="3" value="159"/><column index="4" value="161"/><column index="5" value="152"/><column index="6" value="242"/><column index="7" value="188"/><column index="8" value="145"/><column index="9" value="101"/><column index="10" value="106"/><column index="11" value="104"/><column index="12" value="237"/><column index="13" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="orderdetails" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="124"/><column index="2" value="120"/><column index="3" value="151"/><column index="4" value="92"/><column index="5" value="160"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="92"/><column index="2" value="445"/><column index="3" value="137"/><column index="4" value="122"/><column index="5" value="200"/><column index="6" value="300"/><column index="7" value="149"/><column index="8" value="84"/><column index="9" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*

The goal of this project is to analyze data from a sales records database for scale model cars and answer the following questions:



Question 1: Which products should we order more of or less of?

Question 2: How should we tailor marketing and communication strategies to customer behaviors?

Question 3: How much can we spend on acquiring new customers?




1) Customers: contains customer data. 

        Primary Key (PK): 'customerNumber'. 

		Foreign Key (FK): 'salesRepEmployeeNumber'. 

        Relationship with tables (RWT): Orders and Payments on 'customerNumber', Employees on 'employeeNumber' = 'salesRepEmployeeNumber'

		   

2) Employees: all employee information 

        PK: 'employeeNumber'. 

		FK: 'employeeNumber' and 'officeCode'

		RWT: Offices on 'officeCode' and Customers 'salesRepEmployeeNumber' = 'employeeNumber'

		Recursive Relationship (RR): 'employeeNumber' and 'reportsTo'

 

3) Offices: sales office information

        PK: 'officeCode'. 

		FK: 'officeCode'

		RWT: Employees on 'officeCode'

		

4) Orders: customers' sales orders 

        PK: 'orderNumber'. 

		FK: 'customerNumber' and 'orderNumber'

		RWT: Customers on 'customerNumber', Orderdetails on 'orderNumber'

		

5) OrderDetails: sales order line for each sales order 

        PK: 'orderNumber' and 'productCode'. 

		FK: 'productCode' and 'orderNumber'

		RWT: Orders on 'orderNumber', Products on 'productCode'

		

6) Payments: customers' payment records 

        PK: 'customerNumber' and 'checkNumber'. 

		FK: 'customerNumber' 

		RWT: Customers on 'customerNumber'

		

7) Products: a list of scale model cars 

        PK: 'productCode'

		FK: 'productCode' and 'productLine'

		RWT: Orderdetails on 'productCode' and Productlines on 'productLine' 



8) ProductLines: a list of product line categories 

        PK: 'productLine'

		FK: 'productLine'

		RWT: Products on 'productLine'

		*/

		

/* 

Display all tables, number of attributes in each table and number of rows per table.

*/



SELECT 'Customers' AS table_name,

       13 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM customers

  

UNION ALL



SELECT 'Products' AS table_name,

       9 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM products

  

 UNION ALL

 

 SELECT 'ProductLines' AS table_name,

		4 AS number_of_attributes,

		COUNT(*) AS number_of_rows

   FROM productlines

   

UNION ALL



SELECT 'Orders' AS table_name,

	   7 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM orders

  

UNION ALL 



SELECT 'OrderDetails' AS table_name,

	   5 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM orderdetails

  

UNION ALL



SELECT 'Payments' AS table_name,

       4 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM payments

  

UNION ALL



SELECT 'Employee' AS table_name,

	   8 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM employees

  

UNION ALL



SELECT 'Offices' AS table_name,

       9 AS number_of_attributes,

	   COUNT(*) AS number_of_rows

  FROM offices;



/*

 Which products should we order more of or less of? 

*/

 

 /* Calculating low stock */

 

 SELECT productCode,   ROUND(SUM(quantityOrdered) *1.0 /

                            (SELECT quantityInStock

							   FROM products pr

							  WHERE od.productCode = pr.productCode),2) AS low_stock

   FROM orderdetails od

  GROUP BY productCode

  ORDER BY low_stock DESC

  LIMIT 10;

  

SELECT p.productCode,

	  SUM(od.quantityOrdered * od.priceEach) AS product_performance,

	  ROUND(SUM(od.quantityOrdered) / p.quantityInStock,2) AS low_stock

  FROM products AS p

  JOIN orderdetails AS od

    ON p.productCode = od.productCode

 GROUP BY p.productCode

 ORDER BY low_stock DESC

 LIMIT 10;

  

/* Priority products for restock */



WITH



perf AS (

SELECT productCode, 

        SUM(quantityOrdered) * 1.0 AS qtyorder,

	    SUM(quantityOrdered * priceEach) AS prod_perf

   FROM orderdetails 

  GROUP BY productCode

  ),



low_stock_table AS (

SELECT p.productCode, p.productName, p.productLine,  

       ROUND(SUM(perf.qtyorder * 1.0) / p.quantityInStock, 2) AS low_stock

  FROM products p

  JOIN perf

    ON p.productCode = perf.productCode

 GROUP BY p.productCode

 ORDER BY low_stock

 LIMIT 10

  )

  

SELECT ls.productCode, ls.productName, ls.productLine, ls.low_stock,

       perf.prod_perf

  FROM low_stock_table ls

  JOIN perf

    ON ls.productCode = perf.productCode

 ORDER BY perf.prod_perf DESC;

 

/* Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?*/



SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit

  FROM products p

  JOIN orderdetails od

    ON p.productCode = od.productCode

  JOIN orders o

    ON od.orderNumber = o.orderNumber

 GROUP BY o.customerNumber

 ORDER BY profit DESC, customerNumber DESC;



 /*Top 5 VIP */

 

WITH 



top_profit_customer AS (

SELECT customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit

  FROM products p

  JOIN orderdetails od

    ON p.productCode = od.productCode

  JOIN orders o

    ON od.orderNumber = o.orderNumber

 GROUP BY o.customerNumber

 ORDER BY profit DESC, customerNumber DESC

)



SELECT c.contactLastName, c.contactFirstName, c.city, c.country, 

      tpc.profit

  FROM customers c

  JOIN top_profit_customer tpc

    ON c.customerNumber = tpc.customerNumber

 ORDER BY tpc.profit DESC, c.customerNumber DESC

 LIMIT 5;

 

 /* Top 5 least-engaged */

  

WITH 



top_profit_customer AS (

SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit

  FROM products p

  JOIN orderdetails od

    ON p.productCode = od.productCode

  JOIN orders o

    ON od.orderNumber = o.orderNumber

 GROUP BY o.customerNumber

 ORDER BY profit DESC, customerNumber DESC

)



SELECT c.contactLastName, c.contactFirstName, c.city, c.country, 

       tpc.profit

  FROM customers c

  JOIN top_profit_customer tpc

    ON c.customerNumber = tpc.customerNumber

 ORDER BY tpc.profit, c.customerNumber

 LIMIT 5;

 

 





 WITH 



payment_with_year_month_table AS (

SELECT *, 

       CAST(SUBSTR(paymentDate, 1,4) AS INTEGER)*100 + CAST(SUBSTR(paymentDate, 6,7) AS INTEGER) AS year_month

  FROM payments p

),



customers_by_month_table AS (

SELECT p1.year_month, COUNT(*) AS number_of_customers, SUM(p1.amount) AS total

  FROM payment_with_year_month_table p1

 GROUP BY p1.year_month

),



new_customers_by_month_table AS (

SELECT p1.year_month, 

       COUNT(*) AS number_of_new_customers,

       SUM(p1.amount) AS new_customer_total,

       (SELECT number_of_customers

          FROM customers_by_month_table c

        WHERE c.year_month = p1.year_month) AS number_of_customers,

       (SELECT total

          FROM customers_by_month_table c

         WHERE c.year_month = p1.year_month) AS total

  FROM payment_with_year_month_table p1

 WHERE p1.customerNumber NOT IN (SELECT customerNumber

                                   FROM payment_with_year_month_table p2

                                  WHERE p2.year_month &lt; p1.year_month)

 GROUP BY p1.year_month

)



SELECT year_month, 

       ROUND(number_of_new_customers*100/number_of_customers,1) AS number_of_new_customers_props,

       ROUND(new_customer_total*100/total,1) AS new_customers_total_props

  FROM new_customers_by_month_table;

 

WITH 



profit_from_customer AS (

SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit

  FROM products p

  JOIN orderdetails od

    ON p.productCode = od.productCode

  JOIN orders o

    ON o.ordernumber = od.orderNumber

 GROUP BY o.customerNumber 

)

SELECT AVG(profit) AS avg_profit

  FROM profit_from_customer pc;			

					   

/*

Question 1: Which products should we order more of or less of?



By analyzing the query results 6/10 cars belog to the product line 'Classic Cars'. 

Therefore, classic cars are a priority for restock. They sell frequently and they are the highest performing product.



Question 2: How should we tailor marketing and communication strategies to customer behaviors?

There should be a loyalty program providing the VIP customers with special offers and exlusive VIP perks.

With least engaged customers it would be good to get their opinions on prefrences and preferred price range. Also,

get a poll on demographics like income. This will help understand how to adjust certain offers

and discounts for the lower engaged customers. 



Question 3: How much can we spend on acquiring new customers?			  

The average lifetime value of a customer is $39,040. This means that 

every new customer that is acquired means that there is a profit of 

$39,040. This can be used to predict how much can be spent on acquiring new 

customers while maintaing or increasing profit. 			  



   

		   

 

 </sql><current_tab id="0"/></tab_sql></sqlb_project>
